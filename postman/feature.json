{
	"info": {
		"_postman_id": "169cafa4-6db6-41a0-a6af-b918cf8d7e15",
		"name": "\"My service\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32324098"
	},
	"item": [
		{
			"name": "Validation - 400",
			"item": [
				{
					"name": "Rate",
					"item": [
						{
							"name": "Production",
							"item": [
								{
									"name": "Required path variables",
									"item": [
										{
											"name": "Добавление оценки без поля - идентификатор пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без поля - идентификатор события",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без полей",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отмена оценки без поля - идентификатор пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отмена оценки без поля - идентификатор события",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без полей",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Required path parameters",
									"item": [
										{
											"name": "Добавление оценки без параметра - оценка",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Required request parameter')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - некорректный тип null",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', null);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - некорректный тип float",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5.4);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - значени меньше 0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', -1);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.includes('must be greater than or equal to 0')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - значени больше 10",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 11);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.includes('must be less than or equal to 10')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Test",
							"item": [
								{
									"name": "Required path variables",
									"item": [
										{
											"name": "Добавление оценки без поля - идентификатор пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без поля - идентификатор события",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без полей",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отмена оценки без поля - идентификатор пользователя",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Отмена оценки без поля - идентификатор события",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без полей",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', null);\r",
															"pm.collectionVariables.set('eid', null);\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Required path parameters",
									"item": [
										{
											"name": "Добавление оценки без параметра - оценка",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Required request parameter')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - некорректный тип null",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', null);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - некорректный тип float",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 5.4);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - значени меньше 0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', -1);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.includes('must be greater than or equal to 0')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Добавление оценки без параметра - значени больше 10",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('eid', pm.variables.replaceIn('{{$randomInt}}'));\r",
															"pm.collectionVariables.set('rate', 11);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
															"    pm.response.to.be.badRequest;    \r",
															"    pm.response.to.be.jsonBody;\r",
															"});\r",
															"\r",
															"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
															"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
															"})\r",
															"\r",
															"const target = pm.response.json();\r",
															"\r",
															"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
															"    pm.expect(target).to.have.property('message');\r",
															"    pm.expect(target.message.includes('must be less than or equal to 10')).is.true;\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"users",
														":userId",
														"events",
														":eventId",
														"rate"
													],
													"query": [
														{
															"key": "rate",
															"value": "{{rate}}"
														}
													],
													"variable": [
														{
															"key": "userId",
															"value": "{{uid}}",
															"description": "(Required) id текущего пользователя"
														},
														{
															"key": "eventId",
															"value": "{{eid}}",
															"description": "(Required) id события"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Like",
					"item": [
						{
							"name": "Required path variables",
							"item": [
								{
									"name": "Добавление лайка без поля - идентификатор пользователя",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление лайка без поля - идентификатор события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление лайка без полей",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена лайка без поля - идентификатор пользователя",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена лайка без поля - идентификатор события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена лайка без полей",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"like"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление дизлайка без поля - идентификатор пользователя",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление дизлайка без поля - идентификатор события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление дизлайка без полей",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена дизлайка без поля - идентификатор пользователя",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  pm.variables.replaceIn('{{$randomInt}}'));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена дизлайка без поля - идентификатор события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', pm.variables.replaceIn('{{$randomInt}}'));\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Отмена дизлайка без полей",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set('uid', null);\r",
													"pm.collectionVariables.set('eid',  null);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
													"    pm.response.to.be.badRequest;    \r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"\r",
													"pm.test(\"Сообщение должно начинаться на 'Failed to convert value'\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message.startsWith('Failed to convert value')).is.true;\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"dislike"
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{uid}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eid}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Conflict - 409",
			"item": [
				{
					"name": "Like",
					"item": [
						{
							"name": "Добавление лайка - который уже существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"\r",
											"        await api.likeEvent(user.id, event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Лайк от пользователя ${userId} для события ${eventId} уже существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - который является дизлайком",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Лайк от пользователя ${userId} для события ${eventId}, который нужно отменить не существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // перезаписываем event\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Лайк от пользователя ${userId} для события ${eventId}, который нужно отменить не существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление дизлайка - который уже существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"\r",
											"        await api.dislikeEvent(user.id, event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Дизлайк от пользователя ${userId} для события ${eventId} уже существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - который является лайком",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Дизлайк от пользователя ${userId} для события ${eventId}, который нужно отменить не существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        // перезаписываем event\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId')\r",
											"const eventId = pm.collectionVariables.get('eventId')\r",
											"const message = `Дизлайк от пользователя ${userId} для события ${eventId}, который нужно отменить не существует.`\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rate",
					"item": [
						{
							"name": "Production",
							"item": [
								{
									"name": "Добавление рейтинга - раньше допустимого начала",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", () => {\r",
													"    pm.response.to.have.status(409);\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const message = \"Нельзя оценить событие раньше чем через сутки после начала.\"\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Test",
							"item": [
								{
									"name": "Добавление рейтинга - раньше допустимого начала",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"        const eventBeforeRate = await api.findEvent(event.id);\r",
													"        pm.collectionVariables.set('rateBefore', eventBeforeRate.rating);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let target;\r",
													"\r",
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"\r",
													"    try {\r",
													"        const eventId = pm.collectionVariables.get('eventId')\r",
													"        const event = await api.findEvent(eventId);\r",
													"        target = event\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"            tests()\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");\r",
													"\r",
													"function tests() {\r",
													"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
													"        pm.response.to.be.ok;\r",
													"        pm.response.to.not.be.withBody;\r",
													"    });\r",
													"\r",
													"    pm.test(\"Рейтинг до оценки должен быть 0\", () => {\r",
													"        pm.expect(pm.collectionVariables.get('rateBefore')).is.eqls(0);\r",
													"    })\r",
													"\r",
													"    pm.test(\"Рейтинг после оценки должен быть 5\", () => {\r",
													"        pm.expect(target.rating).is.eqls(5);\r",
													"    })\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Not found - 404",
			"item": [
				{
					"name": "Like",
					"item": [
						{
							"name": "Добавление лайка - от пользователя, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id + randomShift);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId');\r",
											"const message = `User with id=${userId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка - для события, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка - для PENDING события,",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление лайка - для CANCELED события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.rejectEvent(event.id);\r",
											"        \r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - от пользователя, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id + randomShift);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId');\r",
											"const message = `User with id=${userId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - для события, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - для события, которого не существует Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена лайка - для CANCELED события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.rejectEvent(event.id);\r",
											"        \r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"like"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление дизлайка - от пользователя, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id + randomShift);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId');\r",
											"const message = `User with id=${userId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление дизлайка - для события, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление дизлайка - для события, которого не существует Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление дизлайка - для CANCELED события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.rejectEvent(event.id);\r",
											"        \r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - от пользователя, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id + randomShift);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const userId = pm.collectionVariables.get('userId');\r",
											"const message = `User with id=${userId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - для события, которого не существует",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        const randomShift = pm.collectionVariables.get('randomShift');\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - для PENDING события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена дизлайка - для CANCELED cобытия",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        await api.rejectEvent(event.id);\r",
											"\r",
											"        pm.collectionVariables.set('userId', user.id );\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
											"    pm.response.to.be.notFound;\r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const message = `Published event with id=${eventId} was not found.`;\r",
											"\r",
											"pm.test(\"Тело содержит сообщение\", () => {\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target.message).is.equal(message);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"dislike"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rate",
					"item": [
						{
							"name": "Production",
							"item": [
								{
									"name": "Добавление рейтинга - от пользователя, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id + randomShift);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `User with id=${userId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для события, которого не сущесвует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для PENDING события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для CANCELED события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.rejectEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление рейтинга - у пользователя статус не CONFIRMED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        \r",
													"        const prepareEvent = rnd.getEvent(category.id);\r",
													"        prepareEvent.participantLimit = 10;\r",
													"        prepareEvent.requestModeration = true;\r",
													"        console.log(prepareEvent);\r",
													"        const event = await api.addEvent(initiator.id, prepareEvent);\r",
													"        console.log(event)\r",
													"        await api.publishEvent(event.id);\r",
													"\r",
													"        const requesterWithConfirmed = await api.addUser(rnd.getUser());\r",
													"        const requesterWithPending= await api.addUser(rnd.getUser());\r",
													"\r",
													"        const request1 = await api.publishParticipationRequest(event.id, requesterWithConfirmed.id);\r",
													"        await api.publishParticipationRequest(event.id, requesterWithPending.id);\r",
													"\r",
													"        await api.acceptParticipationRequest(event.id, initiator.id, request1.id);\r",
													"\r",
													"        pm.collectionVariables.set('userId', requesterWithPending.id);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Нет запроса с пользователем ${userId} для события ${eventId} и статусом CONFIRMED.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - от пользователя, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id + randomShift);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `User with id=${userId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для события, которого не сущесвует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для PENDING события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для CANCELED события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.rejectEvent(event.id);\r",
													"        \r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для рейтинга, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"        \r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id );\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `Rating with User.id=${userId} and Event.id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Test",
							"item": [
								{
									"name": "Добавление рейтинга - от пользователя, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id + randomShift);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `User with id=${userId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для события, которого не сущесвует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для PENDING события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для CANCELED события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.rejectEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление рейтинга - у пользователя статус не CONFIRMED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        \r",
													"        const prepareEvent = rnd.getEvent(category.id);\r",
													"        prepareEvent.participantLimit = 10;\r",
													"        prepareEvent.requestModeration = true;\r",
													"        console.log(prepareEvent);\r",
													"        const event = await api.addEvent(initiator.id, prepareEvent);\r",
													"        console.log(event)\r",
													"        await api.publishEvent(event.id);\r",
													"\r",
													"        const requesterWithConfirmed = await api.addUser(rnd.getUser());\r",
													"        const requesterWithPending= await api.addUser(rnd.getUser());\r",
													"\r",
													"        const request1 = await api.publishParticipationRequest(event.id, requesterWithConfirmed.id);\r",
													"        await api.publishParticipationRequest(event.id, requesterWithPending.id);\r",
													"\r",
													"        await api.acceptParticipationRequest(event.id, initiator.id, request1.id);\r",
													"\r",
													"        pm.collectionVariables.set('userId', requesterWithPending.id);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Нет запроса с пользователем ${userId} для события ${eventId} и статусом CONFIRMED.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - от пользователя, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id + randomShift);\r",
													"        pm.collectionVariables.set('eventId', event.id);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `User with id=${userId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для события, которого не сущесвует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для PENDING события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для CANCELED события",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.rejectEvent(event.id);\r",
													"        \r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"\r",
													"        const randomShift = pm.collectionVariables.get('randomShift');\r",
													"\r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id + randomShift);\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const message = `Published event with id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление рейтинга - для рейтинга, которого не существует",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        const initiator = await api.addUser(rnd.getUser());\r",
													"        const category = await api.addCategory(rnd.getCategory());\r",
													"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
													"        await api.publishUnlimitEvent(event.id);\r",
													"\r",
													"        const requester = await api.addUser(rnd.getUser());\r",
													"        await api.publishParticipationRequest(event.id, requester.id)\r",
													"        \r",
													"        pm.collectionVariables.set('userId', requester.id);\r",
													"        pm.collectionVariables.set('eventId', event.id );\r",
													"        pm.collectionVariables.set('rate', 5);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", () => {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.jsonBody;\r",
													"});\r",
													"\r",
													"pm.test(\"Запрос к тестовому контроллеру\", () => {\r",
													"    pm.expect(pm.request.url.getPath().startsWith('/test/users/')).is.true;\r",
													"})\r",
													"\r",
													"const target = pm.response.json();\r",
													"const eventId = pm.collectionVariables.get('eventId');\r",
													"const userId = pm.collectionVariables.get('userId');\r",
													"const message = `Rating with User.id=${userId} and Event.id=${eventId} was not found.`;\r",
													"\r",
													"pm.test(\"Тело содержит сообщение\", () => {\r",
													"    pm.expect(target).to.have.property('message');\r",
													"    pm.expect(target.message).is.equal(message);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"users",
												":userId",
												"events",
												":eventId",
												"rate"
											],
											"query": [
												{
													"key": "rate",
													"value": "{{rate}}",
													"description": "(Required) Целочисленный рейтинг пользователя [0;10]"
												}
											],
											"variable": [
												{
													"key": "userId",
													"value": "{{userId}}",
													"description": "(Required) id текущего пользователя"
												},
												{
													"key": "eventId",
													"value": "{{eventId}}",
													"description": "(Required) id события"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Like",
			"item": [
				{
					"name": "Добавление лайка - лайк от одного пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 1\", () => {\r",
									"        pm.expect(target.likes).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена лайка - отмена от одного пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.likeEvent(liker.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 1\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление лайка - лайк нескольких пользователей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.likeEvent(liker2.id, event.id);\r",
									"        await api.likeEvent(liker3.id, event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 3\", () => {\r",
									"        pm.expect(target.likes).is.eqls(3);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена лайка - отмена когда несколько, уменишьтся на 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.likeEvent(liker.id, event.id);\r",
									"        \r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.likeEvent(liker2.id, event.id);\r",
									"        await api.likeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 3\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(3);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 2\", () => {\r",
									"        pm.expect(target.likes).is.eqls(2);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дизлайка - дизлайки от одного пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 1\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(1);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена дизлайка - отмена от одного пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.dislikeEvent(liker.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 1\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дизлайков - дизлайки нескольких пользователей",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.dislikeEvent(liker2.id, event.id);\r",
									"        await api.dislikeEvent(liker3.id, event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 3\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(3);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена дизлайка- отмена когда несколько, уменишьтся на 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"\r",
									"        await api.publishEvent(event.id);\r",
									"        await api.dislikeEvent(liker.id, event.id);\r",
									"        \r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.dislikeEvent(liker2.id, event.id);\r",
									"        await api.dislikeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 3\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(3);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 2\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(2);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление лайка - когда установлен дизлайк",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        await api.dislikeEvent(liker.id, event.id);\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 1\", () => {\r",
									"        pm.expect(target.likes).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 1\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 0\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(0);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление лайка - когда несколько дизлайков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.dislikeEvent(liker2.id, event.id);\r",
									"        await api.dislikeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 1\", () => {\r",
									"        pm.expect(target.likes).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 2\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(2);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 2\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(2);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление лайка - когда несколько дизлайков и этот пользователь",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.dislikeEvent(liker1.id, event.id);\r",
									"        await api.dislikeEvent(liker2.id, event.id);\r",
									"        await api.dislikeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 1\", () => {\r",
									"        pm.expect(target.likes).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 3\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(3);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 2\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(2);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дизлайка - когда установлен лайк",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        await api.likeEvent(liker.id, event.id);\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 1\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(1);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 0\", () => {\r",
									"        pm.expect(target.likes).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 1\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(1);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дизлайка - когда несколько лайков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.likeEvent(liker2.id, event.id);\r",
									"        await api.likeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 2\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(2);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 2\", () => {\r",
									"        pm.expect(target.likes).is.eqls(2);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 1\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(1);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дизлайка - когда несколько дизлайков и этот пользователь Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const liker1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        const liker2 = await api.addUser(rnd.getUser());\r",
									"        const liker3 = await api.addUser(rnd.getUser());\r",
									"        await api.likeEvent(liker1.id, event.id);\r",
									"        await api.likeEvent(liker2.id, event.id);\r",
									"        await api.likeEvent(liker3.id, event.id);\r",
									"\r",
									"        event = await api.findEvent(event.id);\r",
									"\r",
									"        pm.collectionVariables.set('likesBefore', event.likes);\r",
									"        pm.collectionVariables.set('dislikesBefore', event.dislikes);\r",
									"        pm.collectionVariables.set('userId', liker1.id);\r",
									"        pm.collectionVariables.set('eventId', event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    200\r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let target;\r",
									"\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"\r",
									"    try {\r",
									"        const eventId = pm.collectionVariables.get('eventId')\r",
									"        const event = await api.findEvent(eventId);\r",
									"        target = event\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"            tests()\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									"\r",
									"function tests() {\r",
									"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.not.be.withBody;\r",
									"});\r",
									"\r",
									"    pm.test(\"Лайков до запроса должны быть 3\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('likesBefore')).is.eqls(3);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Лайков после запроса должны быть 2\", () => {\r",
									"        pm.expect(target.likes).is.eqls(2);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков до запроса должно быть 0\", () => {\r",
									"        pm.expect(pm.collectionVariables.get('dislikesBefore')).is.eqls(0);\r",
									"    })\r",
									"\r",
									"    pm.test(\"Дизлайков после запроса должно быть 1\", () => {\r",
									"        pm.expect(target.dislikes).is.eqls(1);\r",
									"    })\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Rate",
			"item": [
				{
					"name": "Test",
					"item": [
						{
							"name": "Добавление рейтинга - один пользователь",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        api.publishUnlimitEvent(event.id);\r",
											"\r",
											"        const requester = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester.id)\r",
											"\r",
											"        event = await api.findEvent(event.id);\r",
											"        \r",
											"        pm.collectionVariables.set('userId', requester.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        pm.collectionVariables.set('rate', 5);\r",
											"        pm.collectionVariables.set('rateBefore', event.rating);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let target;\r",
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"\r",
											"    try {\r",
											"        const eventId = pm.collectionVariables.get('eventId')\r",
											"        const event = await api.findEvent(eventId);\r",
											"        target = event\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"            tests()\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											"\r",
											"function tests() {\r",
											"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.not.be.withBody;\r",
											"});\r",
											"\r",
											"    pm.test(\"Рейтинг до запроса должны быть 0\", () => {\r",
											"        pm.expect(pm.collectionVariables.get('rateBefore')).is.eqls(0);\r",
											"    })\r",
											"\r",
											"    pm.test(\"Рейтинег после запроса должны быть 5\", () => {\r",
											"        pm.expect(target.rating).is.eqls(5);\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"users",
										":userId",
										"events",
										":eventId",
										"rate"
									],
									"query": [
										{
											"key": "rate",
											"value": "{{rate}}"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена рейтинга - один пользователь",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishUnlimitEvent(event.id);\r",
											"\r",
											"        const requester = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester.id)\r",
											"\r",
											"        await api.rateEvent(requester.id, event.id, 9);\r",
											"        event = await api.findEvent(event.id);\r",
											"        \r",
											"        pm.collectionVariables.set('userId', requester.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        pm.collectionVariables.set('rateBefore', event.rating);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let target;\r",
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"\r",
											"    try {\r",
											"        const eventId = pm.collectionVariables.get('eventId')\r",
											"        const event = await api.findEvent(eventId);\r",
											"        target = event\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"            tests()\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											"\r",
											"function tests() {\r",
											"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Рейтинг до запроса должны быть 9\", () => {\r",
											"        pm.expect(pm.collectionVariables.get('rateBefore')).is.eqls(9);\r",
											"    })\r",
											"\r",
											"    pm.test(\"Рейтинег после запроса должны быть 0\", () => {\r",
											"        pm.expect(target.rating).is.eqls(0);\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"users",
										":userId",
										"events",
										":eventId",
										"rate"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление рейтинга - несколько пользователей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishUnlimitEvent(event.id);\r",
											"\r",
											"        const requester1 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester1.id)\r",
											"\r",
											"        const requester2 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester2.id)\r",
											"        await api.rateEvent(requester2.id, event.id, 1);\r",
											"\r",
											"        const requester3 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester3.id)\r",
											"        await api.rateEvent(requester3.id, event.id, 8);\r",
											"\r",
											"        event = await api.findEvent(event.id);\r",
											"        \r",
											"        pm.collectionVariables.set('userId', requester1.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        pm.collectionVariables.set('rate', 5);\r",
											"        pm.collectionVariables.set('rateBefore', event.rating);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let target;\r",
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"\r",
											"    try {\r",
											"        const eventId = pm.collectionVariables.get('eventId')\r",
											"        const event = await api.findEvent(eventId);\r",
											"        target = event\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"            tests()\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											"\r",
											"function tests() {\r",
											"    pm.test(\"Ответ должен содержать статуса 200 без тела\", () => {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.not.be.withBody;\r",
											"});\r",
											"\r",
											"    pm.test(\"Рейтинг до запроса должны быть 4.5\", () => {\r",
											"        pm.expect(pm.collectionVariables.get('rateBefore')).is.eqls(4.5);\r",
											"    })\r",
											"\r",
											"    pm.test(\"Рейтинег после запроса должны быть 4.67\", () => {\r",
											"        pm.expect(target.rating).is.eqls(4.67);\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate?rate={{rate}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"users",
										":userId",
										"events",
										":eventId",
										"rate"
									],
									"query": [
										{
											"key": "rate",
											"value": "{{rate}}"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Отмена рейтинга - несколько пользователей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishUnlimitEvent(event.id);\r",
											"\r",
											"        const requester1 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester1.id)\r",
											"        await api.rateEvent(requester1.id, event.id, 5);\r",
											"\r",
											"        const requester2 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester2.id)\r",
											"        await api.rateEvent(requester2.id, event.id, 1);\r",
											"\r",
											"        const requester3 = await api.addUser(rnd.getUser());\r",
											"        await api.publishParticipationRequest(event.id, requester3.id)\r",
											"        await api.rateEvent(requester3.id, event.id, 8);\r",
											"\r",
											"        event = await api.findEvent(event.id);\r",
											"        \r",
											"        pm.collectionVariables.set('userId', requester1.id);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        pm.collectionVariables.set('rateBefore', event.rating);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let target;\r",
											"\r",
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"\r",
											"    try {\r",
											"        const eventId = pm.collectionVariables.get('eventId')\r",
											"        const event = await api.findEvent(eventId);\r",
											"        target = event\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"            tests()\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");\r",
											"\r",
											"function tests() {\r",
											"    pm.test(\"Ответ должен содержать статуса 204 без тела\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.not.be.withBody;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Рейтинг до запроса должны быть 4.67\", () => {\r",
											"        pm.expect(pm.collectionVariables.get('rateBefore')).is.eqls(4.67);\r",
											"    })\r",
											"\r",
											"    pm.test(\"Рейтинег после запроса должны быть 4ю5\", () => {\r",
											"        pm.expect(target.rating).is.eqls(4.5);\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/users/:userId/events/:eventId/rate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"users",
										":userId",
										"events",
										":eventId",
										"rate"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) id текущего пользователя"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Sort",
					"item": [
						{
							"name": "Получение событий - LIKES_DESC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        pm.collectionVariables.set('eventSortTestCategory', category.id);\r",
											"\r",
											"        const initiator1 = await api.addUser(rnd.getUser());\r",
											"        const initiator2 = await api.addUser(rnd.getUser());\r",
											"        const initiator3 = await api.addUser(rnd.getUser());\r",
											"        const initiator4 = await api.addUser(rnd.getUser());\r",
											"        const initiator5 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        let event1 = rnd.getEvent(category.id);\r",
											"        event1 = await api.addEvent(initiator1.id, event1);\r",
											"        let event2 = rnd.getEvent(category.id);\r",
											"        event2 = await api.addEvent(initiator2.id, event2);\r",
											"        let event3 = rnd.getEvent(category.id);\r",
											"        event3 = await api.addEvent(initiator3.id, event3);\r",
											"        let event4 = rnd.getEvent(category.id);\r",
											"        event4 = await api.addEvent(initiator4.id, event4);\r",
											"        let event5 = rnd.getEvent(category.id);\r",
											"        event5 = await api.addEvent(initiator1.id, event5);\r",
											"\r",
											"        await api.publishEvent(event1.id);\r",
											"        await api.publishEvent(event2.id);\r",
											"        await api.publishEvent(event3.id);\r",
											"        await api.publishEvent(event4.id);\r",
											"        await api.publishEvent(event5.id);\r",
											"\r",
											"        // 4 лайка на событии 2\r",
											"        await api.likeEvent(initiator1.id, event2.id);\r",
											"        await api.likeEvent(initiator3.id, event2.id);\r",
											"        await api.likeEvent(initiator4.id, event2.id);\r",
											"        await api.likeEvent(initiator5.id, event2.id);\r",
											"\r",
											"        // 3 лайка и 1 дизлайк на событии 1\r",
											"        await api.likeEvent(initiator2.id, event1.id);\r",
											"        await api.likeEvent(initiator3.id, event1.id);\r",
											"        await api.likeEvent(initiator4.id, event1.id);\r",
											"        await api.dislikeEvent(initiator5.id, event1.id);\r",
											"\r",
											"        // 4 дизлайка на событии 3\r",
											"        await api.dislikeEvent(initiator1.id, event3.id);\r",
											"        await api.dislikeEvent(initiator2.id, event3.id);\r",
											"        await api.dislikeEvent(initiator4.id, event3.id);\r",
											"        await api.dislikeEvent(initiator5.id, event3.id);\r",
											"\r",
											"        // 2 лайка и 2 дизлайка на событии 4\r",
											"        await api.likeEvent(initiator1.id, event4.id);\r",
											"        await api.likeEvent(initiator3.id, event4.id);\r",
											"        await api.dislikeEvent(initiator2.id, event4.id);\r",
											"        await api.dislikeEvent(initiator5.id, event4.id);\r",
											"\r",
											"        // 1 лайк и 2 дизлайк на событии 5\r",
											"        await api.likeEvent(initiator1.id, event5.id);\r",
											"        await api.dislikeEvent(initiator2.id, event5.id);\r",
											"        await api.dislikeEvent(initiator3.id, event5.id);\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    200\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const targetList = pm.response.json();\r",
											"const target1 = pm.response.json()[0];\r",
											"const target2 = pm.response.json()[1];\r",
											"const target3 = pm.response.json()[2];\r",
											"const target4 = pm.response.json()[3];\r",
											"const target5 = pm.response.json()[4];\r",
											"\r",
											"pm.test(\"Получена выборка из 5 событий\", ()=> {\r",
											"    pm.expect(targetList).is.an('Array');\r",
											"    pm.expect(targetList.length).is.equal(5);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target1.likes).is.equal(4);\r",
											"    pm.expect(target1.dislikes).is.equal(0);\r",
											"    pm.expect(target1.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target2.likes).is.equal(3);\r",
											"    pm.expect(target2.dislikes).is.equal(1);\r",
											"    pm.expect(target2.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target3.likes).is.equal(2);\r",
											"    pm.expect(target3.dislikes).is.equal(2);\r",
											"    pm.expect(target3.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target4.likes).is.equal(1);\r",
											"    pm.expect(target4.dislikes).is.equal(2);\r",
											"    pm.expect(target4.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target5.likes).is.equal(0);\r",
											"    pm.expect(target5.dislikes).is.equal(4);\r",
											"    pm.expect(target5.rating).is.equal(0);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events?sort=LIKES_DESC&size=10&categories={{eventSortTestCategory}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "sort",
											"value": "LIKES_DESC",
											"description": "Вариант сортировки: по дате события или по количеству просмотров"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "categories",
											"value": "{{eventSortTestCategory}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение событий - DISLIKES_DESC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        pm.collectionVariables.set('eventSortTestCategory', category.id);\r",
											"\r",
											"        const initiator1 = await api.addUser(rnd.getUser());\r",
											"        const initiator2 = await api.addUser(rnd.getUser());\r",
											"        const initiator3 = await api.addUser(rnd.getUser());\r",
											"        const initiator4 = await api.addUser(rnd.getUser());\r",
											"        const initiator5 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        let event1 = rnd.getEvent(category.id);\r",
											"        event1 = await api.addEvent(initiator1.id, event1);\r",
											"        let event2 = rnd.getEvent(category.id);\r",
											"        event2 = await api.addEvent(initiator2.id, event2);\r",
											"        let event3 = rnd.getEvent(category.id);\r",
											"        event3 = await api.addEvent(initiator3.id, event3);\r",
											"        let event4 = rnd.getEvent(category.id);\r",
											"        event4 = await api.addEvent(initiator4.id, event4);\r",
											"        let event5 = rnd.getEvent(category.id);\r",
											"        event5 = await api.addEvent(initiator1.id, event5);\r",
											"\r",
											"        await api.publishEvent(event1.id);\r",
											"        await api.publishEvent(event2.id);\r",
											"        await api.publishEvent(event3.id);\r",
											"        await api.publishEvent(event4.id);\r",
											"        await api.publishEvent(event5.id);\r",
											"\r",
											"\r",
											"        // 3 дизлайка и 1 лайк на событии 1\r",
											"        await api.dislikeEvent(initiator3.id, event1.id);\r",
											"        await api.dislikeEvent(initiator2.id, event1.id);\r",
											"        await api.dislikeEvent(initiator4.id, event1.id);\r",
											"        await api.likeEvent(initiator5.id, event1.id);\r",
											"\r",
											"        // 1 дизлайк  и 2 лайка на событии 2\r",
											"        await api.dislikeEvent(initiator1.id, event2.id);\r",
											"        await api.likeEvent(initiator2.id, event2.id);\r",
											"        await api.likeEvent(initiator3.id, event2.id);\r",
											"\r",
											"        // 0 дизлайков и 4 лайка на событии 3\r",
											"        await api.likeEvent(initiator1.id, event3.id);\r",
											"        await api.likeEvent(initiator2.id, event3.id);\r",
											"        await api.likeEvent(initiator4.id, event3.id);\r",
											"        await api.likeEvent(initiator5.id, event3.id);\r",
											"\r",
											"        // 2 дизлайка и 2 лайка на событии 4\r",
											"        await api.likeEvent(initiator1.id, event4.id);\r",
											"        await api.likeEvent(initiator3.id, event4.id);\r",
											"        await api.dislikeEvent(initiator2.id, event4.id);\r",
											"        await api.dislikeEvent(initiator5.id, event4.id);\r",
											"\r",
											"        // 4 дизлайка на событии 5\r",
											"        await api.dislikeEvent(initiator1.id, event5.id);\r",
											"        await api.dislikeEvent(initiator3.id, event5.id);\r",
											"        await api.dislikeEvent(initiator4.id, event5.id);\r",
											"        await api.dislikeEvent(initiator5.id, event5.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    200\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const targetList = pm.response.json();\r",
											"const target1 = pm.response.json()[0];\r",
											"const target2 = pm.response.json()[1];\r",
											"const target3 = pm.response.json()[2];\r",
											"const target4 = pm.response.json()[3];\r",
											"const target5 = pm.response.json()[4];\r",
											"\r",
											"pm.test(\"Получена выборка из 5 событий\", ()=> {\r",
											"    pm.expect(targetList).is.an('Array');\r",
											"    pm.expect(targetList.length).is.equal(5);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует DISLIKES_DESC\", ()=> {\r",
											"    pm.expect(target1.likes).is.equal(0);\r",
											"    pm.expect(target1.dislikes).is.equal(4);\r",
											"    pm.expect(target1.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует DISLIKES_DESC\", ()=> {\r",
											"    pm.expect(target2.likes).is.equal(1);\r",
											"    pm.expect(target2.dislikes).is.equal(3);\r",
											"    pm.expect(target2.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует DISLIKES_DESC\", ()=> {\r",
											"    pm.expect(target3.likes).is.equal(2);\r",
											"    pm.expect(target3.dislikes).is.equal(2);\r",
											"    pm.expect(target3.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует DISLIKES_DESC\", ()=> {\r",
											"    pm.expect(target4.likes).is.equal(2);\r",
											"    pm.expect(target4.dislikes).is.equal(1);\r",
											"    pm.expect(target4.rating).is.equal(0);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует DISLIKES_DESC\", ()=> {\r",
											"    pm.expect(target5.likes).is.equal(4);\r",
											"    pm.expect(target5.dislikes).is.equal(0);\r",
											"    pm.expect(target5.rating).is.equal(0);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events?sort=DISLIKES_DESC&size=10&categories={{eventSortTestCategory}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "sort",
											"value": "DISLIKES_DESC",
											"description": "Вариант сортировки: по дате события или по количеству просмотров"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "categories",
											"value": "{{eventSortTestCategory}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение событий - RATING_DESC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        pm.collectionVariables.set('eventSortTestCategory', category.id);\r",
											"\r",
											"        const initiator1 = await api.addUser(rnd.getUser());\r",
											"        const initiator2 = await api.addUser(rnd.getUser());\r",
											"        const initiator3 = await api.addUser(rnd.getUser());\r",
											"        const initiator4 = await api.addUser(rnd.getUser());\r",
											"        const initiator5 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        let event1 = rnd.getEvent(category.id);\r",
											"        event1.requestModeration = false;\r",
											"        event1.participantLimit = 0;\r",
											"        event1 = await api.addEvent(initiator1.id, event1);\r",
											"        let event2 = rnd.getEvent(category.id);\r",
											"        event2.requestModeration = false;\r",
											"        event2.participantLimit = 0;\r",
											"        event2 = await api.addEvent(initiator2.id, event2);\r",
											"        let event3 = rnd.getEvent(category.id);\r",
											"        event3.requestModeration = false;\r",
											"        event3.participantLimit = 0;\r",
											"        event3 = await api.addEvent(initiator3.id, event3);\r",
											"        let event4 = rnd.getEvent(category.id);\r",
											"        event4.requestModeration = false;\r",
											"        event4.participantLimit = 0;\r",
											"        event4 = await api.addEvent(initiator4.id, event4);\r",
											"        let event5 = rnd.getEvent(category.id);\r",
											"        event5.requestModeration = false;\r",
											"        event5.participantLimit = 0;\r",
											"        event5 = await api.addEvent(initiator1.id, event5);\r",
											"\r",
											"        await api.publishEvent(event1.id);\r",
											"        await api.publishEvent(event2.id);\r",
											"        await api.publishEvent(event3.id);\r",
											"        await api.publishEvent(event4.id);\r",
											"        await api.publishEvent(event5.id);\r",
											"\r",
											"        const requester1 = await api.addUser(rnd.getUser());\r",
											"        const requester2 = await api.addUser(rnd.getUser());\r",
											"        const requester3 = await api.addUser(rnd.getUser());\r",
											"        const requester4 = await api.addUser(rnd.getUser());\r",
											"        const requester5 = await api.addUser(rnd.getUser());\r",
											"\r",
											"        await api.publishParticipationRequest(event1.id, requester1.id)\r",
											"        await api.publishParticipationRequest(event1.id, requester2.id)\r",
											"        await api.publishParticipationRequest(event1.id, requester3.id)\r",
											"        await api.publishParticipationRequest(event1.id, requester4.id)\r",
											"        await api.publishParticipationRequest(event1.id, requester5.id)\r",
											"\r",
											"        await api.publishParticipationRequest(event2.id, requester1.id)\r",
											"        await api.publishParticipationRequest(event2.id, requester2.id)\r",
											"        await api.publishParticipationRequest(event2.id, requester3.id)\r",
											"        await api.publishParticipationRequest(event2.id, requester4.id)\r",
											"        await api.publishParticipationRequest(event2.id, requester5.id)\r",
											"\r",
											"        await api.publishParticipationRequest(event3.id, requester1.id)\r",
											"        await api.publishParticipationRequest(event3.id, requester2.id)\r",
											"        await api.publishParticipationRequest(event3.id, requester3.id)\r",
											"        await api.publishParticipationRequest(event3.id, requester4.id)\r",
											"        await api.publishParticipationRequest(event3.id, requester5.id)\r",
											"\r",
											"        await api.publishParticipationRequest(event4.id, requester1.id)\r",
											"        await api.publishParticipationRequest(event4.id, requester2.id)\r",
											"        await api.publishParticipationRequest(event4.id, requester3.id)\r",
											"        await api.publishParticipationRequest(event4.id, requester4.id)\r",
											"        await api.publishParticipationRequest(event4.id, requester5.id)\r",
											"\r",
											"        await api.publishParticipationRequest(event5.id, requester1.id)\r",
											"        await api.publishParticipationRequest(event5.id, requester2.id)\r",
											"        await api.publishParticipationRequest(event5.id, requester3.id)\r",
											"        await api.publishParticipationRequest(event5.id, requester4.id)\r",
											"        await api.publishParticipationRequest(event5.id, requester5.id)\r",
											"\r",
											"        await api.rateEvent(requester1.id, event1.id, 10);\r",
											"        await api.rateEvent(requester2.id, event1.id, 10);\r",
											"        await api.rateEvent(requester3.id, event1.id, 10);\r",
											"        await api.rateEvent(requester5.id, event1.id, 9);\r",
											"\r",
											"        await api.rateEvent(requester1.id, event2.id, 10);\r",
											"        await api.rateEvent(requester2.id, event2.id, 10);\r",
											"        await api.rateEvent(requester5.id, event2.id, 9);\r",
											"\r",
											"        await api.rateEvent(requester1.id, event3.id, 0);\r",
											"        await api.rateEvent(requester2.id, event3.id, 8);\r",
											"        await api.rateEvent(requester3.id, event3.id, 2);\r",
											"        await api.rateEvent(requester4.id, event3.id, 6);\r",
											"\r",
											"        await api.rateEvent(requester3.id, event4.id, 3);\r",
											"        await api.rateEvent(requester4.id, event4.id, 3);\r",
											"        await api.rateEvent(requester5.id, event4.id, 3);\r",
											"\r",
											"        await api.rateEvent(requester1.id, event5.id, 5);\r",
											"        await api.rateEvent(requester2.id, event5.id, 5);\r",
											"        await api.rateEvent(requester5.id, event5.id, 9);\r",
											"\r",
											"\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    200\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.jsonBody;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const targetList = pm.response.json();\r",
											"const target1 = pm.response.json()[0];\r",
											"const target2 = pm.response.json()[1];\r",
											"const target3 = pm.response.json()[2];\r",
											"const target4 = pm.response.json()[3];\r",
											"const target5 = pm.response.json()[4];\r",
											"\r",
											"pm.test(\"Получена выборка из 5 событий\", ()=> {\r",
											"    pm.expect(targetList).is.an('Array');\r",
											"    pm.expect(targetList.length).is.equal(5);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует RATING_DESC\", ()=> {\r",
											"    pm.expect(target1.likes).is.equal(0);\r",
											"    pm.expect(target1.dislikes).is.equal(0);\r",
											"    pm.expect(target1.rating).is.equal(9.75);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует RATING_DESC\", ()=> {\r",
											"    pm.expect(target2.likes).is.equal(0);\r",
											"    pm.expect(target2.dislikes).is.equal(0);\r",
											"    pm.expect(target2.rating).is.equal(9.67);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует LIKES_DESC\", ()=> {\r",
											"    pm.expect(target3.likes).is.equal(0);\r",
											"    pm.expect(target3.dislikes).is.equal(0);\r",
											"    pm.expect(target3.rating).is.equal(6.33);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует RATING_DESC\", ()=> {\r",
											"    pm.expect(target4.likes).is.equal(0);\r",
											"    pm.expect(target4.dislikes).is.equal(0);\r",
											"    pm.expect(target4.rating).is.equal(4);\r",
											"})\r",
											"\r",
											"pm.test(\"Порядок соответствует RATING_DESC\", ()=> {\r",
											"    pm.expect(target5.likes).is.equal(0);\r",
											"    pm.expect(target5.dislikes).is.equal(0);\r",
											"    pm.expect(target5.rating).is.equal(3);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events?sort=RATING_DESC&size=10&categories={{eventSortTestCategory}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "sort",
											"value": "RATING_DESC",
											"description": "Вариант сортировки: по дате события или по количеству просмотров"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "categories",
											"value": "{{eventSortTestCategory}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Добавление нового события - значения по умолчанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        event = rnd.getEvent(category.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(event),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.jsonBody;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, views, likes, dislikes, rating\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('likes');\r",
									"pm.expect(target).to.have.property('dislikes');\r",
									"pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});\r",
									"\r",
									"pm.test(\"Значения для полей должны иметь значения по умолчанию\", () => {\r",
									"    pm.expect(target.views).is.equal(0);\r",
									"    pm.expect(target.likes).is.equal(0);\r",
									"    pm.expect(target.dislikes).is.equal(0);\r",
									"    pm.expect(target.rating).is.equal(0.0);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set('baseUrl', 'http://localhost:8080');\r",
					"pm.collectionVariables.set('userId', null);\r",
					"pm.collectionVariables.set('eventId', null);\r",
					"pm.collectionVariables.set('categoryId', null);\r",
					"pm.collectionVariables.set('compilationId', null);\r",
					"pm.collectionVariables.set('requestId', null);\r",
					"pm.collectionVariables.set('uid', null);\r",
					"pm.collectionVariables.set('eid', null);\r",
					"pm.collectionVariables.set('catid', null);\r",
					"pm.collectionVariables.set('compid', null);\r",
					"pm.collectionVariables.set('reqid', null);\r",
					"pm.collectionVariables.set('rate', null);\r",
					"pm.collectionVariables.set('rateBefore', null);\r",
					"pm.collectionVariables.set('randomShift', pm.variables.replaceIn('{{$randomInt}}') * 1000);\r",
					"\r",
					"API = class {\r",
					"    constructor(pm, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = pm;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async publishUnlimitEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, \r",
					"        {stateAction: \"PUBLISH_EVENT\",\r",
					"        requestModeration: false,\r",
					"        participantLimit: 0},\r",
					"        \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    // =======================================================================\r",
					"    async likeEvent(userId, eventId, verbose=null) {\r",
					"        return this.put('/users/' + userId + '/events/' + eventId + '/like', null, \"Ошбика при лайке\", verbose);\r",
					"    }\r",
					"\r",
					"    async undoLike(userId, eventId, verbose=null) {\r",
					"        return this.delete('/users/' + userId + '/events/' + eventId + '/like', null, \"Ошбика при отмене лайка\", verbose);\r",
					"    }\r",
					"\r",
					"    async dislikeEvent(userId, eventId, verbose=null) {\r",
					"        return this.put('/users/' + userId + '/events/' + eventId + '/dislike', null, \"Ошбика при дизлайке\", verbose);\r",
					"    }\r",
					"\r",
					"    async undoDislike(userId, eventId, verbose=null) {\r",
					"        return this.delete('/users/' + userId + '/events/' + eventId + '/dislike', null, \"Ошбика при отмене дизлайка\", verbose);\r",
					"    }\r",
					"\r",
					"    async rateEvent(userId, eventId, rate, verbose=null) {\r",
					"        return this.put('/test/users/' + userId + '/events/' + eventId + '/rate/?rate=' + rate, null, \"Ошбика при оценки\", verbose);\r",
					"    }\r",
					"\r",
					"    async undoRate(userId, eventId, verbose=null) {\r",
					"        return this.delete('/users/' + userId + '/events/' + eventId + '/rate', null, \"Ошбика при отмене оценки\", verbose);\r",
					"    }\r",
					"\r",
					"    // =======================================================================\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"    \r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    // =======================================================================\r",
					"    async put(path, body = null, errorText = \"Ошибка при выполнении put-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PUT\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);\r",
					"    }\r",
					"    // =======================================================================\r",
					"\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"\r",
					"                    if (request.method === 'PUT' || request.method === 'DELETE')\r",
					"                        resolve();\r",
					"\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    } else {\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "compilationId",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "catid",
			"value": ""
		},
		{
			"key": "compid",
			"value": ""
		},
		{
			"key": "reqid",
			"value": ""
		},
		{
			"key": "rate",
			"value": ""
		},
		{
			"key": "rateBefore",
			"value": ""
		},
		{
			"key": "randomShift",
			"value": ""
		},
		{
			"key": "likesBefore",
			"value": ""
		},
		{
			"key": "dislikesBefore",
			"value": ""
		},
		{
			"key": "eventSortTestText",
			"value": ""
		},
		{
			"key": "eventSortTestCategory",
			"value": ""
		}
	]
}